"use strict";System.register([],function(_export,_context){return{setters:[],execute:function(){"serviceWorker"in navigator&&("https:"===window.location.protocol||"localhost"===window.location.hostname||0===window.location.hostname.indexOf("127."))&&navigator.serviceWorker.register("/service-worker.js",{scope:"./"}).then(function(e){"function"==typeof e.update&&e.update(),e.onupdatefound=function(){if(navigator.serviceWorker.controller){var t=e.installing;t.onstatechange=function(){switch(t.state){case"installed":break;case"redundant":throw new Error("The installing service worker became redundant.")}}}}})["catch"](function(e){console.error("Error during service worker registration:",e)}),eval(function(e,t,n,r,o,i){if(o=function(e){return e.toString(t)},!"".replace(/^/,String)){for(;n--;)i[o(n)]=r[n]||o(n);r=[function(e){return i[e]}],o=function(){return"\\w+"},n=1}for(;n--;)r[n]&&(e=e.replace(new RegExp("\\b"+o(n)+"\\b","g"),r[n]));return e}("4 7=g.b;4 2=3.p('r');2.9='a/5';2.c='d';2.e=('6:'==3.u.h?'6:':'i:')+'//j.k.l/t/1.5?m=n&o='+7;(3.8('q')[0]||3.8('s')[0]).f(2);",31,31,"||mtiTracking|document|var|css|https|projectId|getElementsByTagName|type|text|MTIProjectId|rel|stylesheet|href|appendChild|window|protocol|http|fast|fonts|net|apiType|css|projectid|createElement|head|link|body||location".split("|"),0,{}))}}});
//# sourceMappingURL=data:application/json;base64,
