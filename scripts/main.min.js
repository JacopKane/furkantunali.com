System.register([],function(_export){"use strict";return{setters:[],execute:function(){"serviceWorker"in navigator&&("https:"===window.location.protocol||"localhost"===window.location.hostname||0===window.location.hostname.indexOf("127."))&&navigator.serviceWorker.register("/service-worker.js",{scope:"./"}).then(function(e){"function"==typeof e.update&&e.update(),e.onupdatefound=function(){if(navigator.serviceWorker.controller){var t=e.installing;t.onstatechange=function(){switch(t.state){case"installed":break;case"redundant":throw new Error("The installing service worker became redundant.")}}}}})["catch"](function(e){console.error("Error during service worker registration:",e)}),eval(function(e,t,r,n,o,i){if(o=function(e){return e.toString(t)},!"".replace(/^/,String)){for(;r--;)i[o(r)]=n[r]||o(r);n=[function(e){return i[e]}],o=function(){return"\\w+"},r=1}for(;r--;)n[r]&&(e=e.replace(new RegExp("\\b"+o(r)+"\\b","g"),n[r]));return e}("4 7=g.b;4 2=3.p('r');2.9='a/5';2.c='d';2.e=('6:'==3.u.h?'6:':'i:')+'//j.k.l/t/1.5?m=n&o='+7;(3.8('q')[0]||3.8('s')[0]).f(2);",31,31,"||mtiTracking|document|var|css|https|projectId|getElementsByTagName|type|text|MTIProjectId|rel|stylesheet|href|appendChild|window|protocol|http|fast|fonts|net|apiType|css|projectid|createElement|head|link|body||location".split("|"),0,{}))}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4ubWluLmpzIiwibWFpbi5qcyIsIm10aUZvbnRUcmFja2luZ0NvZGUubWluLmpzIl0sIm5hbWVzIjpbIlN5c3RlbSIsInJlZ2lzdGVyIiwiX2V4cG9ydCIsInNldHRlcnMiLCJleGVjdXRlIiwibmF2aWdhdG9yIiwid2luZG93IiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiaW5kZXhPZiIsInNlcnZpY2VXb3JrZXIiLCJzY29wZSIsInRoZW4iLCJyZWdpc3RyYXRpb24iLCJ1cGRhdGUiLCJvbnVwZGF0ZWZvdW5kIiwiY29udHJvbGxlciIsImluc3RhbGxpbmdXb3JrZXIiLCJpbnN0YWxsaW5nIiwib25zdGF0ZWNoYW5nZSIsInN0YXRlIiwiRXJyb3IiLCJlIiwiY29uc29sZSIsImVycm9yIiwiZXZhbCIsInAiLCJhIiwiYyIsImsiLCJyIiwidG9TdHJpbmciLCJyZXBsYWNlIiwiU3RyaW5nIiwiUmVnRXhwIiwic3BsaXQiXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxZQUFhLFNBQVVDLFNDQTlCLFlET0UsUUFDRUMsV0FDQUMsUUFBUyxXQ0hiLGlCQUFBQyxhQUNBLFdBQUFDLE9BQUFDLFNBQUFDLFVBQ0EsY0FBQUYsT0FBQUMsU0FBQUUsVUFDQSxJQUFBSCxPQUFBQyxTQUFBRSxTQUFBQyxRQUFBLFVBQ0FMLFVBQUFNLGNBQUFWLFNBQUEsc0JBQ0FXLE1BQUEsT0FDQUMsS0FBQSxTQUFBQyxHQUlBLGtCQUFBQSxHQUFBQyxRQUNBRCxFQUFBQyxTQUlBRCxFQUFBRSxjQUFBLFdBS0EsR0FBQVgsVUFBQU0sY0FBQU0sV0FBQSxDQUdBLEdBQUFDLEdBQUFKLEVBQUFLLFVBRUFELEdBQUFFLGNBQUEsV0FDQSxPQUFBRixFQUFBRyxPQUNBLElBQUEsWUFLQSxLQUVBLEtBQUEsWUFDQSxLQUFBLElBQUFDLE9BQUEseURBTUEsU0FBQSxTQUFBQyxHQUNBQyxRQUFBQyxNQUFBLDRDQUFBRixLQ2hEQUcsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBUCxFQUFBUSxHQUFBLEdBQUFSLEVBQUEsU0FBQU0sR0FBQSxNQUFBQSxHQUFBRyxTQUFBSixLQUFBLEdBQUFLLFFBQUEsSUFBQUMsUUFBQSxDQUFBLEtBQUFMLEtBQUFFLEVBQUFSLEVBQUFNLElBQUFDLEVBQUFELElBQUFOLEVBQUFNLEVBQUFDLElBQUEsU0FBQVAsR0FBQSxNQUFBUSxHQUFBUixLQUFBQSxFQUFBLFdBQUEsTUFBQSxRQUFBTSxFQUFBLEVBQUEsS0FBQUEsS0FBQUMsRUFBQUQsS0FBQUYsRUFBQUEsRUFBQU0sUUFBQSxHQUFBRSxRQUFBLE1BQUFaLEVBQUFNLEdBQUEsTUFBQSxLQUFBQyxFQUFBRCxJQUFBLE9BQUFGLElBQUEsK0hBQUEsR0FBQSxHQUFBLDhOQUFBUyxNQUFBLEtBQUEiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6W251bGwsIid1c2Ugc3RyaWN0JztcblxuLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHNlcnZpY2Ugd29ya2VycyBhcmUgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGJyb3dzZXIsXG4vLyBhbmQgdGhhdCB0aGUgY3VycmVudCBwYWdlIGlzIGFjY2Vzc2VkIGZyb20gYSBzZWN1cmUgb3JpZ2luLiBVc2luZyBhXG4vLyBzZXJ2aWNlIHdvcmtlciBmcm9tIGFuIGluc2VjdXJlIG9yaWdpbiB3aWxsIHRyaWdnZXIgSlMgY29uc29sZSBlcnJvcnMuIFNlZVxuLy8gaHR0cDovL3d3dy5jaHJvbWl1bS5vcmcvSG9tZS9jaHJvbWl1bS1zZWN1cml0eS9wcmVmZXItc2VjdXJlLW9yaWdpbnMtZm9yLXBvd2VyZnVsLW5ldy1mZWF0dXJlc1xuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IgJiZcbiAgICAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyB8fFxuICAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XG4gICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5pbmRleE9mKCcxMjcuJykgPT09IDApKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcvc2VydmljZS13b3JrZXIuanMnLCB7XG4gICAgc2NvcGU6ICcuLydcbiAgfSkudGhlbihmdW5jdGlvbihyZWdpc3RyYXRpb24pIHtcbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlcmUncyBhbiB1cGRhdGVkIHZlcnNpb24gb2Ygc2VydmljZS13b3JrZXIuanMgd2l0aFxuICAgIC8vIG5ldyBmaWxlcyB0byBjYWNoZTpcbiAgICAvLyBodHRwczovL3NsaWdodGx5b2ZmLmdpdGh1Yi5pby9TZXJ2aWNlV29ya2VyL3NwZWMvc2VydmljZV93b3JrZXIvaW5kZXguaHRtbCNzZXJ2aWNlLXdvcmtlci1yZWdpc3RyYXRpb24tdXBkYXRlLW1ldGhvZFxuICAgIGlmICh0eXBlb2YgcmVnaXN0cmF0aW9uLnVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVnaXN0cmF0aW9uLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZWZvdW5kIGlzIGZpcmVkIGlmIHNlcnZpY2Utd29ya2VyLmpzIGNoYW5nZXMuXG4gICAgcmVnaXN0cmF0aW9uLm9udXBkYXRlZm91bmQgPSAoKCkgPT4ge1xuICAgICAgLy8gdXBkYXRlZm91bmQgaXMgYWxzbyBmaXJlZCB0aGUgdmVyeSBmaXJzdCB0aW1lIHRoZSBTVyBpcyBpbnN0YWxsZWQsXG4gICAgICAvLyBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHByb21wdCBmb3IgYSByZWxvYWQgYXQgdGhhdCBwb2ludC5cbiAgICAgIC8vIFNvIGNoZWNrIGhlcmUgdG8gc2VlIGlmIHRoZSBwYWdlIGlzIGFscmVhZHkgY29udHJvbGxlZCxcbiAgICAgIC8vIGkuZS4gd2hldGhlciB0aGVyZSdzIGFuIGV4aXN0aW5nIHNlcnZpY2Ugd29ya2VyLlxuICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgLy8gVGhlIHVwZGF0ZWZvdW5kIGV2ZW50IGltcGxpZXMgdGhhdCByZWdpc3RyYXRpb24uaW5zdGFsbGluZyBpcyBzZXQ6XG4gICAgICAgIC8vIGh0dHBzOi8vc2xpZ2h0bHlvZmYuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvc3BlYy9zZXJ2aWNlX3dvcmtlci9pbmRleC5odG1sI3NlcnZpY2Utd29ya2VyLWNvbnRhaW5lci11cGRhdGVmb3VuZC1ldmVudFxuICAgICAgICB2YXIgaW5zdGFsbGluZ1dvcmtlciA9IHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nO1xuXG4gICAgICAgIGluc3RhbGxpbmdXb3JrZXIub25zdGF0ZWNoYW5nZSA9ICgoKSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlICdpbnN0YWxsZWQnOlxuICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgb2xkIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gcHVyZ2VkIGFuZCB0aGVcbiAgICAgICAgICAgICAgLy8gZnJlc2ggY29udGVudCB3aWxsIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgY2FjaGUuXG4gICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGEgXCJOZXcgY29udGVudCBpc1xuICAgICAgICAgICAgICAvLyBhdmFpbGFibGU7IHBsZWFzZSByZWZyZXNoLlwiIG1lc3NhZ2UgaW4gdGhlIHBhZ2UncyBpbnRlcmZhY2UuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyZWR1bmRhbnQnOlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBpbnN0YWxsaW5nICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcnZpY2Ugd29ya2VyIGJlY2FtZSByZWR1bmRhbnQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGUpO1xuICB9KTtcbn1cbiIsImV2YWwoZnVuY3Rpb24ocCxhLGMsayxlLHIpe2U9ZnVuY3Rpb24oYyl7cmV0dXJuIGMudG9TdHJpbmcoYSl9O2lmKCEnJy5yZXBsYWNlKC9eLyxTdHJpbmcpKXt3aGlsZShjLS0pcltlKGMpXT1rW2NdfHxlKGMpO2s9W2Z1bmN0aW9uKGUpe3JldHVybiByW2VdfV07ZT1mdW5jdGlvbigpe3JldHVybidcXFxcdysnfTtjPTF9O3doaWxlKGMtLSlpZihrW2NdKXA9cC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxiJytlKGMpKydcXFxcYicsJ2cnKSxrW2NdKTtyZXR1cm4gcH0oJzQgNz1nLmI7NCAyPTMucChcXCdyXFwnKTsyLjk9XFwnYS81XFwnOzIuYz1cXCdkXFwnOzIuZT0oXFwnNjpcXCc9PTMudS5oP1xcJzY6XFwnOlxcJ2k6XFwnKStcXCcvL2ouay5sL3QvMS41P209biZvPVxcJys3OygzLjgoXFwncVxcJylbMF18fDMuOChcXCdzXFwnKVswXSkuZigyKTsnLDMxLDMxLCd8fG10aVRyYWNraW5nfGRvY3VtZW50fHZhcnxjc3N8aHR0cHN8cHJvamVjdElkfGdldEVsZW1lbnRzQnlUYWdOYW1lfHR5cGV8dGV4dHxNVElQcm9qZWN0SWR8cmVsfHN0eWxlc2hlZXR8aHJlZnxhcHBlbmRDaGlsZHx3aW5kb3d8cHJvdG9jb2x8aHR0cHxmYXN0fGZvbnRzfG5ldHxhcGlUeXBlfGNzc3xwcm9qZWN0aWR8Y3JlYXRlRWxlbWVudHxoZWFkfGxpbmt8Ym9keXx8bG9jYXRpb24nLnNwbGl0KCd8JyksMCx7fSkpIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9